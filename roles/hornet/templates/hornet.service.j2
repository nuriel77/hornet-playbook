[Unit]
Description=Hornet IOTA
{% if hornet_profile != 'light' %}
After=docker.service
Requires=docker.service
{% else %}
Wants=network-online.target
After=network-online.target
{% endif %}

[Service]
{% if hornet_profile != 'light' %}
TimeoutStartSec=0
TimeoutStopSec=${TIMEOUT_STOP_SEC}
Restart=always
EnvironmentFile=-{{ config_dir }}/hornet
SuccessExitStatus={{ service_success_exit_status | default('143') }}
ExecStartPre=-/bin/bash -c "/usr/bin/docker rm %p || /bin/true"
ExecStart=/usr/bin/docker run \
  --name %p \
  --net=host \
  --user={{ hornet_uid.stdout }} \
  --cap-drop=ALL \
  -v /etc/localtime:/etc/localtime:ro,Z \
  -v {{ hornet_db_path }}:/app/mainnetdb:rw,Z \
  -v {{ hornet_config }}:/app/config.json:ro,Z \
  -v {{ hornet_db_tar }}:/app/latest-export.gz.bin:ro,Z \
  --ulimit nofile={{ hornet_nofile_limit }}:{{ hornet_nofile_limit }} \
  $DOCKER_OPTS \
  ${HORNET_IMAGE}:${TAG} \
  $OPTIONS
ExecStop=/usr/bin/docker stop %p
ExecReload=/usr/bin/docker restart %p
{% else %}
User={{ hornet_username }}
Group={{ hornet_username }}
WorkingDirectory={{ hornet_home_path }}
Type=simple
EnvironmentFile=-{{ config_dir }}/hornet
ExecStart={{ hornet_home_path }}/bin/hornet-${TAG} $OPTIONS

Restart=on-failure
RestartSec=10
KillMode=process
TimeoutStopSec=${TIMEOUT_STOP_SEC}
LimitNOFILE={{ hornet_nofile_limit }}

StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=hornet

# Restrict process
PrivateDevices=yes
PrivateTmp=yes
ProtectSystem=full
ProtectHome=yes
{% endif %}

[Install]
WantedBy=multi-user.target
