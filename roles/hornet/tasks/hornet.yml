- name: set variables centos
  set_fact:
    systemd_dir: /usr/lib/systemd/system
    config_dir: /etc/sysconfig
  when: ansible_distribution in redhat_family_list
  tags: always

- name: set variables ubuntu
  set_fact:
    systemd_dir: /etc/systemd/system
    config_dir: /etc/default
  when: ansible_distribution in debian_family_list
  tags: always

- name: scripts block
  block:

    - name: copy horc
      copy:
        src: files/horc
        dest: /usr/bin/horc
        mode: 0755
        owner: root
        group: root

    - name: download ps_mem
      get_url:
        url: https://raw.githubusercontent.com/pixelb/ps_mem/master/ps_mem.py
        dest: /usr/bin/ps_mem
        mode: 0755
      ignore_errors: yes

    - name: ensure ~/.horc exists
      copy:
        dest: "{{ ansible_env.HOME }}/.horc"
        content: ""
        force: no

  tags:
    - scripts

- name: allow IPv4 forwarding in kernel
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: yes
    state: present
    reload: yes

- name: clone hornet repository
  git:
    repo: '{{ hornet_git_url }}'
    dest: '{{ hornet_git_dest }}'

# Clone hornet
- name: get latest hornet git commit
  shell: "cd {{ hornet_git_dest }} && git rev-parse --short HEAD"
  register: hornet_commit_hash
  changed_when: false

- name: set hornet image tag
  set_fact:
    hornet_tag: "{{ hornet_commit_hash.stdout }}"

# User
- name: add user to run hornet as
  user:
    name: "{{ hornet_user }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ hornet_home_path }}"
  tags:
    - hornet_user

- name: get hornet user uid
  shell: "echo -n $(id -u {{ hornet_user }})"
  changed_when: false
  register: hornet_uid
  tags:
    - hornet_create_container
    - get_hornet_uid

- name: hornet paths
  file:
    state: directory
    mode: 0700
    owner: "{{ hornet_user }}"
    group: "{{ hornet_group }}"
    path: "{{ item }}"
  with_items:
    - "{{ hornet_home_path }}"
    - "{{ hornet_db_path }}"

# hornet system config
- name: copy hornet environment config file
  template:
    src: templates/hornet.sysconfig.j2
    dest: "{{ config_dir }}/hornet"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  notify:
    - restart hornet

- name: copy hornet systemd file
  template:
    src: templates/hornet.service.j2
    dest: "{{ systemd_dir }}/hornet.service"
  tags:
    - hornet_service_file
  notify:
    - restart hornet

- name: copy hornet config file
  template:
    src: templates/config.json.j2
    dest: "{{ hornet_home_path }}/config.json"
    mode: 0600
    owner: "{{ hornet_user }}"
    group: "{{ hornet_group }}"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  tags: hornet_config_file
  notify: restart hornet

- name: download hornet snapshot DB (can take a while)
  get_url:
    url: "{{ hornet_db_source }}"
    dest: "{{ hornet_db_tar }}"
    mode: 0644
    owner: "{{ hornet_user }}"
    group: "{{ hornet_group }}"
    force: "{{ overwrite | default('no') }}"
  tags:
    - download_snapshot_db

# Image
- name: build hornet image task
  import_tasks: image-hornet.yml
